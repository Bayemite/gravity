class DoubleClick
{
    bool isSingleClick[5];
    bool isDoubleClick[5];
    sf::Clock clickClocks[5];
    int dblClickSpeedMs;

public:
    DoubleClick() : isSingleClick{false, false, false, false, false},
                    isDoubleClick{false, false, false, false, false},
                    clickClocks{},
                    dblClickSpeedMs{500}
    {
    }

    void handleEvents(const sf::Event &ev)
    {
        if (ev.type != sf::Event::MouseButtonPressed)
            return;

        auto &data = ev.mouseButton;
        assert(0 <= data.button && data.button < 5 && "Mouse button out of range.");
        auto &loneClick = isSingleClick[data.button];
        if (loneClick)
        {
            int delay = clickClocks[data.button].restart().asMilliseconds();
            if (delay <= dblClickSpeedMs)
            {
                isDoubleClick 
            }
        }
    }

    bool isDoubleClick(sf::Mouse::Button button)
    {
        assert(0 <= button && button < 5 && "Mouse button out of range.");
        return isDoubleClick[button];
    }
};

float panSpeed = 10.f*viewZoom;
KeysPressed wasd{sf::Keyboard::W, sf::Keyboard::A, sf::Keyboard::S, sf::Keyboard::D};
if (wasd.any_pressed())
{
    sf::Vector2f delta{};
    if (wasd.is_pressed(sf::Keyboard::W))
        delta.y -= panSpeed;
    if(wasd.is_pressed(sf::Keyboard::S))
        delta.y += panSpeed;
    if(wasd.is_pressed(sf::Keyboard::A))
        delta.x -= panSpeed;
    if(wasd.is_pressed(sf::Keyboard::D))
        delta.x += panSpeed;
    view.move(delta);
    window.setView(view);
}